"""
Interface Web para LexAprendiz - Especialista em Legisla√ß√£o da Aprendizagem
Siste    # Sidebar - Informa√ß√µes do usu√°rio
    with st.sidebar:
        user_title = get_content("sidebar_user_title", "üë§ Usu√°rio")
        st.header(user_title)
        show_user_info()
        st.markdown("---")
        
        # Seletor de tema (dispon√≠vel para todos os usu√°rios)
        st.markdown("### üé® Apar√™ncia")
        current_theme = get_content("theme_mode", "light")
        
        theme_options = {
            "light": "üåû Clara",
            "dark": "üåô Escura"
        }
        
        selected_theme = st.selectbox(
            "Escolha o tema:",
            options=list(theme_options.keys()),
            format_func=lambda x: theme_options[x],
            index=0 if current_theme == "light" else 1,
            key="theme_selector"
        )
        
        # Salva altera√ß√£o de tema imediatamente
        if selected_theme != current_theme:
            from content_manager import load_content_settings, save_content_settings
            content = load_content_settings()
            content["theme_mode"] = selected_theme
            save_content_settings(content)
            st.rerun()
        
        st.markdown("---")
        
        # Dashboard Administrativo (s√≥ para admin)
        if is_admin(st.session_state.get("user_data")):
            admin_title = get_content("sidebar_admin_title", "üõ†Ô∏è Dashboard Admin")
            with st.expander(admin_title, expanded=False):
                show_admin_dashboard()
            st.markdown("---")
        
        agents_title = get_content("sidebar_agents_title", "üìã Agentes Dispon√≠veis")
        st.header(agents_title)ica√ß√£o e Dashboard Administrativo
"""
import streamlit as st
import importlib.util
from pathlib import Path
import sys
from ferramentas_juridicas import pesquisar_legislacao
from banco_conhecimento import banco_conhecimento
import json
from logo_base64 import get_uploaded_logo, LEXAPRENDIZ_LOGO_PLACEHOLDER
from auth_system import require_authentication, show_user_info, show_admin_dashboard, is_admin
from content_manager import get_content, init_content_settings, apply_theme_styles

def load_agent_from_file(agent_path):
    """Carrega um agente de um arquivo"""
    try:
        spec = importlib.util.spec_from_file_location("agent_module", agent_path)
        agent_module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(agent_module)
        
        # Procura por um agente no m√≥dulo
        if hasattr(agent_module, 'root_agent'):
            return agent_module.root_agent
        elif hasattr(agent_module, 'agent'):
            return agent_module.agent
        else:
            return None
    except Exception as e:
        st.error(f"Erro ao carregar agente: {e}")
        return None

def main():
    st.set_page_config(
        page_title="LexAprendiz - Especialista em Legisla√ß√£o",
        page_icon="‚öñÔ∏è",
        layout="wide"
    )
    
    # Inicializa configura√ß√µes de conte√∫do
    init_content_settings()
    
    # Aplica estilos de tema
    apply_theme_styles()
    
    # Sistema de Autentica√ß√£o
    if not require_authentication():
        return
    
    # Capa personalizada com logo
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        # Verifica se h√° logo carregada na sess√£o (apenas exibe, n√£o permite upload aqui)
        uploaded_logo = st.session_state.get('lexaprendiz_logo')
        
        if uploaded_logo:
            # Usa a logo real carregada (redimensionada)
            st.markdown(
                f'<div style="text-align: center; margin-bottom: 30px;">'
                f'<img src="{uploaded_logo}" style="max-width: 200px; height: auto;">'
                f'</div>',
                unsafe_allow_html=True
            )
        else:
            # Mostra placeholder se n√£o h√° logo carregada
            st.markdown(
                f'<div style="text-align: center; margin-bottom: 30px;">'
                f'<img src="{LEXAPRENDIZ_LOGO_PLACEHOLDER}" style="max-width: 200px; height: auto;">'
                f'</div>',
                unsafe_allow_html=True
            )
        
        # Texto descritivo ap√≥s a logo (edit√°vel pelo admin)
        main_title = get_content("main_title", "Conhe√ßa o LexAprendiz")
        main_description = get_content("main_description", "Obtenha respostas r√°pidas e precisas para suas perguntas. Nosso Agente LexAprendiz agora usa a tecnologia Gemini 2.5 flash para fornecer esclarecimentos sobre a legisla√ß√£o de forma interativa e com fontes confidenciais.")
        
        st.markdown(
            f"""
            <div class="main-content-box">
                <div class="main-title">{main_title}</div>
                <div class="main-description">{main_description}</div>
            </div>
            """,
            unsafe_allow_html=True
        )
    
    # Sidebar - Informa√ß√µes do usu√°rio
    with st.sidebar:
        st.header("ÔøΩ Usu√°rio")
        show_user_info()
        st.markdown("---")
        
        # Dashboard Administrativo (s√≥ para admin)
        if is_admin(st.session_state.get("user_data")):
            with st.expander("üõ†Ô∏è Dashboard Admin", expanded=False):
                show_admin_dashboard()
            st.markdown("---")
        
        st.header("üìã Agentes Dispon√≠veis")
    
    # Procura por agentes
    current_dir = Path.cwd()
    agent_options = {}
    
    for path in current_dir.iterdir():
        if path.is_dir() and (path / "agent.py").exists():
            agent_options[path.name] = path / "agent.py"
    
    if not agent_options:
        st.warning("‚ùå Nenhum agente encontrado. Certifique-se de ter arquivos `agent.py` nos subdiret√≥rios.")
        return
    
    selected_agent_name = st.sidebar.selectbox(
        "Selecione um agente:",
        list(agent_options.keys())
    )
    
    if selected_agent_name:
        agent_path = agent_options[selected_agent_name]
        
        # Carrega o agente
        agent = load_agent_from_file(agent_path)
        
        if agent:
            # Informa√ß√µes espec√≠ficas do LexAprendiz na sidebar (edit√°veis)
            if selected_agent_name == "lexaprendiz":
                agent_name = get_content("agent_name", "LexAprendiz")
                agent_model = get_content("agent_model", "gemini-2.5-flash")
                agent_description = get_content("agent_description", "Agente especializado em legisla√ß√£o da aprendizagem no Brasil")
                specialties = get_content("specialties", [
                    "‚Ä¢ C√°lculo de cotas de aprendizes",
                    "‚Ä¢ Direitos e deveres de aprendizes",
                    "‚Ä¢ Legisla√ß√£o trabalhista espec√≠fica",
                    "‚Ä¢ Fiscaliza√ß√£o e auditoria",
                    "‚Ä¢ Portarias e decretos atualizados"
                ])
                
                st.sidebar.markdown("### üìö Informa√ß√µes do Agente")
                st.sidebar.markdown(f"**Nome:** {agent_name}")
                st.sidebar.markdown(f"**Modelo:** {agent_model}")
                st.sidebar.markdown(f"**Descri√ß√£o:** {agent_description}")
                st.sidebar.markdown("---")
                
                st.sidebar.markdown("### üéØ Especialidades")
                for specialty in specialties:
                    st.sidebar.markdown(specialty)
            
            # Interface de chat (t√≠tulo edit√°vel com estilo personalizado)
            chat_title = get_content("chat_title", "üí¨ Converse com o LexAprendiz")
            st.markdown(f'<div class="chat-title">{chat_title}</div>', unsafe_allow_html=True)
            
            # Hist√≥rico do chat
            if "messages" not in st.session_state:
                st.session_state.messages = []
            
            # Exibe mensagens anteriores
            for message in st.session_state.messages:
                with st.chat_message(message["role"]):
                    st.markdown(message["content"])
            
            # Input do usu√°rio
            if prompt := st.chat_input("Digite sua mensagem..."):
                # Adiciona mensagem do usu√°rio
                st.session_state.messages.append({"role": "user", "content": prompt})
                with st.chat_message("user"):
                    st.markdown(prompt)
                
                # Gera resposta baseada no agente selecionado
                with st.chat_message("assistant"):
                    if selected_agent_name == "search":
                        response = f"""üîç **Agente de Busca** respondendo sobre: "{prompt}"
                        
Como um agente especializado em pesquisa sobre a lei da aprendizagem no Brasil, posso te ajudar com informa√ß√µes sobre:

- **Lei n¬∫ 10.097/2000** - Lei da Aprendizagem
- **Decreto n¬∫ 5.598/2005** - Regulamenta√ß√£o da Lei
- **Cotas de aprendizes** para empresas
- **Direitos e deveres** dos aprendizes
- **Programas de aprendizagem** profissional

Para informa√ß√µes mais espec√≠ficas, eu utilizaria a ferramenta de busca do Google para encontrar dados atualizados e relevantes sobre sua consulta.

*üí° Esta √© uma demonstra√ß√£o. Para funcionalidade completa, a integra√ß√£o com Google ADK seria necess√°ria.*"""
                    
                    else:  # LexAprendiz
                        # Verifica se a pergunta √© sobre aprendizagem (ampliada)
                        keywords_aprendizagem = [
                            'aprendiz', 'aprendizagem', 'lei 10.097', 'decreto 5.598', 'clt', 
                            'menor aprendiz', 'contrato', 'jovem aprendiz', 'cota', 'senai', 'senac',
                            'portaria', 'mte', 'minist√©rio do trabalho', 'fiscaliza√ß√£o', 'auditores fiscais',
                            'aft', 'fiscal do trabalho', 'inspe√ß√£o', 'multa', 'penalidade',
                            'jurisprud√™ncia', 's√∫mula', 'orienta√ß√£o jurisprudencial', 'tst',
                            'programa de aprendizagem', 'entidade formadora', 'sistema s',
                            'registro', 'ctps', 'sal√°rio', 'jornada', 'f√©rias', 'rescis√£o',
                            'deficiente', 'pessoa com defici√™ncia', 'inclus√£o', 'acessibilidade'
                        ]
                        
                        # Detecta tamb√©m n√∫meros de normas espec√≠ficas sobre aprendizagem
                        normas_aprendizagem = [
                            '10.097', '5.598', '3.872', '1199', '615', '723', '74', '422'
                        ]
                        
                        is_about_aprendizagem = (
                            any(keyword in prompt.lower() for keyword in keywords_aprendizagem) or
                            any(norma in prompt for norma in normas_aprendizagem) or
                            'mte' in prompt.lower() or
                            'trabalho' in prompt.lower()
                        )
                        
                        if is_about_aprendizagem:
                            # Primeiro, busca no banco de conhecimento especializado
                            with st.spinner('üß† Consultando base de conhecimento jur√≠dico...'):
                                resposta_especializada = banco_conhecimento.buscar_resposta(prompt)
                            
                            if resposta_especializada:
                                # Usa resposta especializada do banco de conhecimento
                                response = resposta_especializada
                            else:
                                # Fallback para pesquisa em tempo real
                                with st.spinner('üîç Pesquisando legisla√ß√£o em tempo real...'):
                                    resultados_pesquisa = pesquisar_legislacao(prompt)
                                
                                response = f"""‚öñÔ∏è **LexAprendiz** - Especialista em Legisla√ß√£o da Aprendizagem

**üìã Consulta:** "{prompt}"

**üîç PESQUISA JUR√çDICA EM TEMPO REAL**
*Realizada em: {resultados_pesquisa.get('timestamp', 'Agora')}*

**üìö FUNDAMENTA√á√ÉO LEGAL ENCONTRADA:**

Consultei as bases jur√≠dicas dispon√≠veis mas n√£o encontrei uma resposta espec√≠fica pr√©-formulada para sua consulta. 

Para uma an√°lise detalhada, recomendo:
- Consultar diretamente a legisla√ß√£o vigente
- Buscar orienta√ß√£o jur√≠dica especializada
- Verificar atualiza√ß√µes recentes nas normas

**üîó FONTES PARA CONSULTA:**
- [Lei 10.097/2000](http://www.planalto.gov.br/ccivil_03/leis/l10097.htm)
- [Decreto 5.598/2005](http://www.planalto.gov.br/ccivil_03/_ato2004-2006/2005/decreto/d5598.htm)
- [TST - Jurisprud√™ncias](https://www.tst.jus.br/)

**‚úÖ RESPOSTA FUNDAMENTADA EM PESQUISA JUR√çDICA**
*Para an√°lise espec√≠fica de casos concretos, recomenda-se consulta com advogado especializado.*"""
                        
                        else:
                            response = f"""‚öñÔ∏è **LexAprendiz** - Especialista em Legisla√ß√£o da Aprendizagem

**üîç AN√ÅLISE DA CONSULTA:** "{prompt}"

Analisei cuidadosamente sua consulta e n√£o identifiquei rela√ß√£o direta com a legisla√ß√£o da aprendizagem brasileira.

**üéØ Minha especializa√ß√£o abrange TODA legisla√ß√£o de aprendizagem:**
- **Leis:** 10.097/2000, CLT (arts. 428-433), normas correlatas
- **Decretos:** 5.598/2005 e regulamenta√ß√µes
- **Portarias MTE:** Incluindo 3.872/2023 sobre fiscaliza√ß√£o
- **Jurisprud√™ncia:** S√∫mulas TST, orienta√ß√µes jurisprudenciais
- **Procedimentos:** Fiscaliza√ß√£o, auditoria, penalidades
- **Contratos:** Aprendizagem, jovem aprendiz, pessoa com defici√™ncia
- **Cotas:** C√°lculos, obrigatoriedades, exce√ß√µes
- **Entidades:** Formadoras, Sistema S, programas sociais

**üí° Se sua consulta est√° relacionada a algum destes temas, reformule especificando a conex√£o com aprendizagem.**

**Para consultas fora desta especializa√ß√£o, recomendo procurar um especialista na √°rea espec√≠fica.**"""
                    
                    st.markdown(response)
                
                st.session_state.messages.append({"role": "assistant", "content": response})
            
            # Informa√ß√µes do agente
            with st.sidebar:
                st.header("‚ÑπÔ∏è Informa√ß√µes do Agente")
                if hasattr(agent, 'name'):
                    st.write(f"**Nome:** {agent.name}")
                if hasattr(agent, 'model'):
                    st.write(f"**Modelo:** {agent.model}")
                if hasattr(agent, 'description'):
                    st.write(f"**Descri√ß√£o:** {agent.description}")
        else:
            st.error(f"‚ùå Erro ao carregar agente '{selected_agent_name}'")

if __name__ == "__main__":
    main()